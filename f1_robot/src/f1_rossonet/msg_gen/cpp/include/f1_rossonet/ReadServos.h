/* Auto-generated by genmsg_cpp for file /home/rossonet/catkin_ws/src/f1_rossonet/msg/ReadServos.msg */
#ifndef F1_ROSSONET_MESSAGE_READSERVOS_H
#define F1_ROSSONET_MESSAGE_READSERVOS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "f1_rossonet/Servos.h"

namespace f1_rossonet
{
template <class ContainerAllocator>
struct ReadServos_ {
  typedef ReadServos_<ContainerAllocator> Type;

  ReadServos_()
  : posizione()
  {
  }

  ReadServos_(const ContainerAllocator& _alloc)
  : posizione(_alloc)
  {
  }

  typedef  ::f1_rossonet::Servos_<ContainerAllocator>  _posizione_type;
   ::f1_rossonet::Servos_<ContainerAllocator>  posizione;


  typedef boost::shared_ptr< ::f1_rossonet::ReadServos_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::f1_rossonet::ReadServos_<ContainerAllocator>  const> ConstPtr;
}; // struct ReadServos
typedef  ::f1_rossonet::ReadServos_<std::allocator<void> > ReadServos;

typedef boost::shared_ptr< ::f1_rossonet::ReadServos> ReadServosPtr;
typedef boost::shared_ptr< ::f1_rossonet::ReadServos const> ReadServosConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::f1_rossonet::ReadServos_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::f1_rossonet::ReadServos_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace f1_rossonet

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::f1_rossonet::ReadServos_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::f1_rossonet::ReadServos_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::f1_rossonet::ReadServos_<ContainerAllocator> > {
  static const char* value() 
  {
    return "38c35486bc1889288de434181d43c782";
  }

  static const char* value(const  ::f1_rossonet::ReadServos_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x38c35486bc188928ULL;
  static const uint64_t static_value2 = 0x8de434181d43c782ULL;
};

template<class ContainerAllocator>
struct DataType< ::f1_rossonet::ReadServos_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f1_rossonet/ReadServos";
  }

  static const char* value(const  ::f1_rossonet::ReadServos_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::f1_rossonet::ReadServos_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Servos posizione\n\
\n\
================================================================================\n\
MSG: f1_rossonet/Servos\n\
int16 link1\n\
int16 link2\n\
int16 link3\n\
int16 link4\n\
\n\
";
  }

  static const char* value(const  ::f1_rossonet::ReadServos_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::f1_rossonet::ReadServos_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::f1_rossonet::ReadServos_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.posizione);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ReadServos_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::f1_rossonet::ReadServos_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::f1_rossonet::ReadServos_<ContainerAllocator> & v) 
  {
    s << indent << "posizione: ";
s << std::endl;
    Printer< ::f1_rossonet::Servos_<ContainerAllocator> >::stream(s, indent + "  ", v.posizione);
  }
};


} // namespace message_operations
} // namespace ros

#endif // F1_ROSSONET_MESSAGE_READSERVOS_H

